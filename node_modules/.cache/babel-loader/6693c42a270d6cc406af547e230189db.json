{"ast":null,"code":"// import { ContactSupportOutlined } from '@material-ui/icons';\nimport axios from 'axios';\nconst BASE_URL = \"https://api.thingiverse.com\";\n\nclass ThingiverseApi {\n  static async request(endpoint, paramsOrData = {}, verb = \"get\") {\n    let auth = JSON.parse(window.localStorage.getItem('persist:root')).auth;\n    let access_token = JSON.parse(auth).access_token; // paramsOrData._token = token\n    //( for now, hardcode token for \"testing\"\n    // \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc\" +\n    // \"3RpbmciLCJpc19hZG1pbiI6ZmFsc2UsImlhdCI6MTU1MzcwMzE1M30.\" +\n    // \"COmFETEsTxN_VfIlgIKw0bYJLkvbRQNgO1XCSE8NZ0U\");\n\n    console.log(\"API Call:\", endpoint, paramsOrData, verb);\n\n    try {\n      return (await axios({\n        method: verb,\n        url: `${BASE_URL}/${endpoint}`,\n        headers: {\n          \"Authorization\": 'Bearer ' + access_token\n        },\n        [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData\n      })).data; // axios sends query string data via the \"params\" key,\n      // and request body data via the \"data\" key,\n      // so the key we need depends on the HTTP verb\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  static async getUserData() {\n    let res = await this.request('users/me');\n    return res;\n  }\n\n  static async getAll(handle, page = 1, days = 7) {\n    let res = await this.request('search', {\n      page: page,\n      per_page: 30,\n      sort: 'popular',\n      posted_after: `now-${days}d`,\n      type: 'thing'\n    });\n    return res; // https://www.thingiverse.com/search?page=2&per_page=20&sort=popular&posted_after=now-30d&type=things&q=\n  }\n\n  static async getCategories() {\n    let res = await this.request('categories');\n    return res;\n  }\n\n  static async getFeatured() {\n    let res = await this.request('search', {\n      \"is_featured\": 1\n    });\n    return res;\n  }\n\n  static async getLikes() {\n    let res = await this.request(`users/marcoh1012/likes`);\n    return res;\n  }\n\n  static async getModel(id) {\n    let res = await this.request(`things/${id}`);\n    return res;\n  }\n\n  static async likeModel(id) {\n    //add like to model\n    let res = await this.request(`things/${id}/likes`, {}, 'post');\n    return res;\n  }\n\n  static async unlikeModel(id) {\n    //unlike a model that was already liked.\n    let res = await this.request(`things/${id}/likes`, {}, 'delete');\n    return res;\n  }\n\n  static async getFiles(id) {\n    //get all files from the model\n    let res = await this.request(`things/${id}/files`);\n    return res;\n  }\n\n  static async getComments(id) {\n    //get all comments from model\n    let res = await this.request(`things/${id}/comments`);\n    return res;\n  }\n\n  static async postComment(id, comment) {\n    //post comment on model\n    let res = await this.request('comments/', {\n      \"body\": comment,\n      'target_type': \"thing\",\n      'target_id': parseInt(id)\n    }, \"post\");\n    return res;\n  }\n\n  static async deleteComment(id) {\n    //delete a user comment\n    let res = await this.request(`comments/${id}`, {}, \"delete\");\n  }\n\n  static async getCategory(name) {\n    let res = await this.request(`categories/${name}`);\n    return res;\n  }\n\n  static async getCategoryThings(name, page = 1, days = 7) {\n    let res1 = await this.request(`categories/${name}`);\n    let res2 = await this.request(`categories/${name}/things`, {\n      page: page,\n      per_page: 30,\n      sort: 'popular',\n      posted_after: `now-7d`,\n      type: 'thing'\n    });\n    return {\n      total: res1.count,\n      hits: res2\n    };\n  }\n\n  static async search(term, page = 1) {\n    let res = await this.request(`search/${term}/`, {\n      page: page,\n      per_page: 30,\n      sort: 'popular',\n      type: 'thing'\n    });\n    return res;\n  }\n\n  static async getDownloadLink(id) {\n    let res = await this.request(`things/${id}/package-url`);\n    return res.public_url;\n  }\n\n  static async downloadFile(id) {\n    let res = await this.request(`files/${id}/download`);\n    return res;\n  }\n\n}\n\nexport default ThingiverseApi;","map":{"version":3,"sources":["/home/marcoh1012/Documents/SpringBoard/Capstone_2/nimbus3d/src/ThingiverseApi.js"],"names":["axios","BASE_URL","ThingiverseApi","request","endpoint","paramsOrData","verb","auth","JSON","parse","window","localStorage","getItem","access_token","console","log","method","url","headers","data","err","error","response","message","Array","isArray","getUserData","res","getAll","handle","page","days","per_page","sort","posted_after","type","getCategories","getFeatured","getLikes","getModel","id","likeModel","unlikeModel","getFiles","getComments","postComment","comment","parseInt","deleteComment","getCategory","name","getCategoryThings","res1","res2","total","count","hits","search","term","getDownloadLink","public_url","downloadFile"],"mappings":"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","sourcesContent":["// import { ContactSupportOutlined } from '@material-ui/icons';\nimport axios from 'axios';\n\nconst BASE_URL = \"https://api.thingiverse.com\"\n\nclass ThingiverseApi {\n    static async request(endpoint, paramsOrData = {}, verb = \"get\") {\n      let auth = JSON.parse(window.localStorage.getItem('persist:root')).auth\n      let access_token = JSON.parse(auth).access_token\n      \n    // paramsOrData._token = token\n\n      \n      //( for now, hardcode token for \"testing\"\n      // \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc\" +\n      // \"3RpbmciLCJpc19hZG1pbiI6ZmFsc2UsImlhdCI6MTU1MzcwMzE1M30.\" +\n      // \"COmFETEsTxN_VfIlgIKw0bYJLkvbRQNgO1XCSE8NZ0U\");\n  \n      console.log(\"API Call:\", endpoint, paramsOrData, verb);\n  \n      try {\n        return (await axios({\n          method: verb,\n          url: `${BASE_URL}/${endpoint}`,\n          headers: {\"Authorization\" : 'Bearer ' + access_token},\n          [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData})).data;\n          // axios sends query string data via the \"params\" key,\n          // and request body data via the \"data\" key,\n          // so the key we need depends on the HTTP verb\n      }\n  \n      catch(err) {\n        console.error(\"API Error:\", err.response);\n        let message = err.response.data.message;\n        throw Array.isArray(message) ? message : [message];\n      }\n    }\n\n\n    static async getUserData(){\n      let res = await this.request('users/me')\n      return res\n    }\n\n    static async getAll(handle,page=1 ,days=7){\n      let res = await this.request('search',{\n        page:page,\n        per_page:30,\n        sort: 'popular',\n        posted_after: `now-${days}d`,\n        type: 'thing'\n      })\n      return res\n      // https://www.thingiverse.com/search?page=2&per_page=20&sort=popular&posted_after=now-30d&type=things&q=\n    }\n\n    static async getCategories(){\n      let res = await this.request('categories')\n      return res\n    }\n\n    static async getFeatured(){\n      let res = await this.request('search',{\"is_featured\":1})\n      return res\n    }\n\n    static async getLikes(){\n      let res = await this.request(`users/marcoh1012/likes`)\n      return res\n    }\n\n    static async getModel(id){\n      let res = await this.request(`things/${id}`)\n      return res\n    }\n\n    static async likeModel(id){\n      //add like to model\n      let res = await this.request(`things/${id}/likes`,{}, 'post')\n      return res\n    }\n\n    static async unlikeModel(id){\n      //unlike a model that was already liked.\n      let res = await this.request(`things/${id}/likes`, {},'delete')\n      return res\n    }\n\n    static async getFiles(id){\n      //get all files from the model\n      let res = await this.request(`things/${id}/files`)\n      return res\n    }\n\n    static async getComments(id){\n      //get all comments from model\n      let res = await this.request(`things/${id}/comments`)\n      return res\n    }\n\n    static async postComment(id, comment){\n      //post comment on model\n      let res = await this.request('comments/',{\"body\":comment, 'target_type': \"thing\",'target_id': parseInt(id)}, \"post\")\n      return res\n    }\n\n    static async deleteComment(id){\n      //delete a user comment\n      let res = await this.request(`comments/${id}`, {}, \"delete\")\n    }\n\n    static async getCategory(name){\n      let res = await this.request(`categories/${name}`)\n      return res\n    }\n\n    static async getCategoryThings(name,page=1, days=7){\n      let res1 = await this.request(`categories/${name}`)\n      let res2 = await this.request(`categories/${name}/things`,{\n        page:page,\n        per_page:30,\n        sort: 'popular',\n        posted_after: `now-7d`,\n        type: 'thing'\n      })\n      return {total: res1.count, hits: res2}\n    }\n  \n    static async search(term, page=1){\n      let res = await this.request(`search/${term}/`,{\n        page:page,\n        per_page:30,\n        sort: 'popular',\n        type: 'thing'\n      })\n      return res\n\n    }\n\n    static async getDownloadLink(id){\n      let res = await this.request(`things/${id}/package-url`)\n      return res.public_url\n    }\n    static async downloadFile(id){\n      let res = await this.request(`files/${id}/download`)\n      return res\n    }\n\n  }\n\n\n\n  export default ThingiverseApi"]},"metadata":{},"sourceType":"module"}